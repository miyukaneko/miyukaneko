char currentkey = '1';
color bgc = color(255);

//for rainbow
int circleSize = 0;
int rainbow;

void setup() {
size(800, 800);
background(255);
colorMode(HSB,360,100,100);
smooth();
}

void draw() {
  //key 2 rainbow brush
  if (mousePressed && key == '1') {
    noStroke();
    fill(color(rainbow, 255, 255),50);
    ellipse(mouseX, mouseY, circleSize, circleSize);
    rainbow++;
    if (rainbow > 255) {
      rainbow = 0;
    }  
    circleSize++;
  } else {
    circleSize = 0;
  }
  
  // triggering the clear_print function
  if(keyPressed) {
    clear_print(); 
  }
  // triggering the newkeychoice1
  if(mousePressed) {
    drawChoice(); 
  }
  //if (frameCount < 700 ) {
  //  saveFrame("images/face-######.png");
  //} else {  
  //  exit();  
  //}
}


void drawChoice() {
  // the key mapping if statemens that you can change to do anything you want.
  // just make sure each key option has the a stroke or fill and then what type of 
  // graphic function
 
   
 // key global variable contains whatever key was last pressed 
  char currentkey = key;
   
  switch(currentkey) {
  case '2': 
    println("2");  // black line
    drawline(color(0,0,50), mouseX, mouseY, pmouseX, pmouseY); 
    break;
  case '3': 
    println("3");  // green line
    drawline(color(97,50,100), mouseX, mouseY, pmouseX, pmouseY); 
    break;
  case '4': 
    println("4");  // yellow circle
    drawcircle(color(50,47,100,70), mouseX, mouseY, pmouseX, pmouseY);
    break;
  case '5': 
    println("5");  // pink circle
    drawcircle(color(302,50,100,70), mouseX, mouseY, pmouseX, pmouseY);
    break;
  case '6': 
    println("6");  // red line
    drawFatLine(color(347,47,100), mouseX, mouseY, pmouseX, pmouseY);
    break;
  case '7': 
    println("7");  // bubbles6631
    drawbubble(color(213,46,100,100), mouseX, mouseY, pmouseX, pmouseY);
    break;
  case '8': 
    println("8");  // erase with bg color
    eraser(bgc,mouseX, mouseY,70);
    break;
  default:             // Default executes if the case labels
    println("None");   // don't match the switch parameter
    break;   
  } 
}

void drawline(color k, int lx,int ly, int px,int py) {
  strokeWeight(5);
  stroke(k);
  line(lx, ly, px, py); 
}

void drawcircle(color k, int lx,int ly, int px,int py) {
  noStroke();
  fill(k);
  ellipse(lx,ly,30,30);
}

void drawbubble(color k, int lx,int ly, int px,int py) {
  strokeWeight(3);
  stroke(0,0,100);
  fill(k);
  ellipse(lx,ly,60,60);
}

void drawFatLine(color k, int lx,int ly, int px,int py) {
  strokeWeight(30);
  stroke(k);
  line(lx, ly, px, py); 
}


void eraser(color k,int lx,int ly,int sz) {
  stroke(k);
  fill(0,0,100);
  ellipse(lx, ly, sz, sz); 
}


void clear_print() {

// these 2 options let you choose between clearing the background
// and saveing the current image as a file.
  if (key == 'x' || key == 'X') {
     background(0,0,100);
  } else if (key == 'p' || key == 'P') {
     saveFrame("x_xxx_####.png");
     //this will save the name as the intials and a random counting number.
     // it will always be larger in value then the last one.
     delay(500);
  }
}