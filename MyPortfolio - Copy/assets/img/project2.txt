(((((TAB Project2_0)))))
import ddf.minim.*;

Spring[] springBasket = new Spring[9];
Flower flower;
Mushroom endCard;
Minim minim;
AudioPlayer player;
int count = 0;
int index = 1;
float movementVal = 0;

void setup()
{
  colorMode(RGB);
  background(255, 168, 168);
  size(1920, 1080, P3D);
  
  // we pass this to Minim so that it can load files from the data directory
  minim = new Minim(this);
  
  // loadFile will look in all the same places as loadImage does.
  // this means you can find files that are in the data folder and the 
  // sketch folder. you can also pass an absolute path, or a URL.
  player = minim.loadFile("mushroom.mp3");
  
  //Flowers and springs
  for (int i = 0; i < springBasket.length; i += 3) {
    springBasket[i] = new Spring(width/2, height/2, 150, 0.95, 10, 0.1, 0); 
    springBasket[i+1] = new Spring(width/2 - width/3, height/2, 150, 0.95, 10, 0.1, 0); 
    springBasket[i+2] = new Spring(width/2 + width/3, height/2, 150, 0.95, 10, 0.1, 0); 
  }
  
  //Mushroom
  endCard = new Mushroom(width/2, height/2, 2);
  
  //Music
  player.play();
}

void draw()
{

  /******************* Background *******************/
  if (millis() < 3600) {
    background(255, 168, 168);//red
  } else if (millis() < 5800) {
    background(255, 220, 168);//orange
  } else if (millis() < 8000) {
    background(255, 255, 168);//yellow
  } else if (millis() < 10200) {
    background(206, 255, 168);//lightgreen
  } else if (millis() < 12400) {
    background(168, 255, 223); //cyan
  } else if (millis() < 14600) {
    background(168, 248, 255); //lightblue
  } else if (millis() < 16800) {
    background(168, 203, 255);//blue
  } else if (millis() < 19000) {
    background(184, 168, 255);//purple
  } else if (millis() < 21200) {
    background(255, 168, 251);//pink
  } else if (millis() < 23400) {
    background(255, 168, 204); //coral
  } else if (millis() < 37000) {
    background(255, 168, 168); //red
  } else if (millis() > 37000) { 
    background(128, 128, 128); //black
  } 
  /******************* Background *******************/
  stroke(255);
  /******************* Waveforms *******************/
  // draw the waveforms
  // the values returned by left.get() and right.get() will be between -1 and 1,
  // so we need to scale them up to see the waveform
  // note that if the file is MONO, left.get() and right.get() will return the same value
  if (millis() < 41500) {
    for(int i = 0; i < player.bufferSize() - 1; i++)
    {
      float x1 = map( i, 0, player.bufferSize(), 0, width );
      float x2 = map( i+1, 0, player.bufferSize(), 0, width );
      line( x1, height/2 + player.left.get(i)*150, x2, height/2 + player.left.get(i+1)*150 );
    }
  }
  /******************* Waveforms *******************/
  
  /******************* Movement *******************/
  
  
  //println(millis());
  if (millis() > 4000 && millis() < 6000) {
    springBasket[0].moveTo(width/2, height/2 - 350);
  } else if (millis() < 8000) {
    springBasket[0].moveTo(width/2, height/2);
  } else if (millis() < 9000) {
    index = 2;
  } else if (millis() < 9500) {
    index = 3;
  } else if (millis() < 12000) { /********** Begin first choreography **********/
    springBasket[0].moveTo(width/2, height/2 + 350);
    springBasket[1].moveTo(width/2 - width/3, height/2 - 350);
    springBasket[2].moveTo(width/2 + width/3, height/2 - 350);
  } else if (millis() < 13500) {
    springBasket[0].moveTo(width/2, height/2);
    springBasket[1].moveTo(width/2 - width/3, height/2);
    springBasket[2].moveTo(width/2 + width/3, height/2);
  } else if (millis() < 15000) {
    springBasket[0].moveTo(width/2, height/2 - 350);
    springBasket[1].moveTo(width/2 - width/3, height/2 + 350);
    springBasket[2].moveTo(width/2 + width/3, height/2 + 350);
  } else if (millis() < 16500) {
    springBasket[0].moveTo(width/2, height/2);
    springBasket[1].moveTo(width/2 - width/3, height/2);
    springBasket[2].moveTo(width/2 + width/3, height/2);
  } else if (millis() < 19000) { /********** Begin second choreography **********/
    springBasket[0].moveTo(width/2, height/2 - 350);
    springBasket[1].moveTo(width/2 - width/3, height/2 - 350);
    springBasket[2].moveTo(width/2 + width/3, height/2 - 350);
  } else if (millis() < 19500) {
    springBasket[0].moveTo(width/2 - width/3, height/2 - 350);
    springBasket[1].moveTo(width/2 - width/3, height/2);
    springBasket[2].moveTo(width/2, height/2 - 350);
  } else if (millis() < 20000) {
    springBasket[0].moveTo(width/2 - width/3, height/2);
    springBasket[1].moveTo(width/2 - width/3, height/2 + 350);
    springBasket[2].moveTo(width/2 - width/3, height/2 - 350);
  } else if (millis() < 20500) {
    springBasket[0].moveTo(width/2 - width/3, height/2 + 350);
    springBasket[1].moveTo(width/2, height/2 + 350);
    springBasket[2].moveTo(width/2 - width/3, height/2);
  } else if (millis() < 21000) {
    springBasket[0].moveTo(width/2, height/2 + 350);
    springBasket[1].moveTo(width/2 + width/3, height/2 + 350);
    springBasket[2].moveTo(width/2 - width/3, height/2 + 350);
  } else if (millis() < 21500) {
    springBasket[0].moveTo(width/2 + width/3, height/2 + 350);
    springBasket[1].moveTo(width/2 + width/3, height/2);
    springBasket[2].moveTo(width/2, height/2 + 350);
  } else if (millis() < 22000) {
    springBasket[0].moveTo(width/2 + width/3, height/2);
    springBasket[1].moveTo(width/2 + width/3, height/2 - 350);
    springBasket[2].moveTo(width/2 + width/3, height/2 + 350);
  } else if (millis() < 22500) {
    springBasket[0].moveTo(width/2 + width/3, height/2 - 350);
    springBasket[1].moveTo(width/2, height/2 - 350);
    springBasket[2].moveTo(width/2 + width/3, height/2);
  } else if (millis() < 24500) {
    springBasket[0].moveTo(width/2, height/2 - 350);
    springBasket[1].moveTo(width/2 - width/3, height/2 - 350);
    springBasket[2].moveTo(width/2 + width/3, height/2 - 350);
  } else if (millis() < 27500) {
    springBasket[0].moveTo(width/2, height/2);
    springBasket[1].moveTo(width/2 - width/3, height/2);
    springBasket[2].moveTo(width/2 + width/3, height/2);
  } else if (millis() < 30400) { /********** Begin third choreography **********/
    index = 4;
  } else if (millis() < 32600) {
    index = 5;
  } else if (millis() < 34800) {
    springBasket[6].moveTo(width/2 - width/3, height/2);
    springBasket[7].moveTo(width/2, height/2);
    springBasket[8].moveTo(width/2 + width/3, height/2);
  } else if (millis() < 37000) {
    springBasket[6].moveTo(width/2 - width/3, height/2);
    springBasket[7].moveTo(width/2 + width/3, height/2);
    springBasket[8].moveTo(width/2, height/2);
  } else if (millis() < 40000) {
    springBasket[6].moveTo(width/2 - width, height/2);
    springBasket[7].moveTo(width/2 + width, height/2);
    springBasket[8].moveTo(width/2, height/2 - height);
  } else { //End screen
    endCard.display();
  } 
  /******************* Movement *******************/  

  /******************* Updating and Displaying Springs *******************/ 
  if (index < 4) {
    springBasket[0].update();
    springBasket[0].display();
  }
  if (index > 1 && index < 4) {
    springBasket[1].update();
    springBasket[1].display();
    if (index > 2 && index < 4) {
      springBasket[2].update();
      springBasket[2].display();
    }
  } else if (index == 4) {
    springBasket[3].update();
    springBasket[3].display();
    springBasket[4].update();
    springBasket[4].display();
    springBasket[5].update();
    springBasket[5].display();
  } else if (index == 5) {
    springBasket[6].update();
    springBasket[6].display();
    springBasket[7].update();
    springBasket[7].display();
    springBasket[8].update();
    springBasket[8].display();
  }
  
  /******************* Updating and Displaying Springs *******************/ 
  
  /******************* Save Frame *******************/ 
  if (frameCount < 2500 ) {
    
  // Saves each frame as line-000001.png, line-000002.png, etc.
  saveFrame("line-######.png");
  }
  //println(frameCount);
 /******************* Save Frame *******************/ 
}

//void keyPressed()
//{
//  if ( player.isPlaying() )
//  {
//    player.pause();
//  }
//  // if the player is at the end of the file,
//  // we have to rewind it before telling it to play again
//  else if ( player.position() == player.length() )
//  {
//    player.rewind();
//    player.play();
//  }
//  else
//  {
//    player.play();
//  }
//}


(((((TAB Spring)))))

int num = 3;
Flower flowerCreation;
    
class Spring { 
  // Screen values 
  float xpos, ypos;
  float tempxpos, tempypos; 
  int size = 20; 
  boolean over = false; 
  boolean move = false; 

  // Spring simulation constants 
  float mass;       // Mass 
  float k = 0.2;    // Spring constant 
  float damp;       // Damping 
  float rest_posx;  // Rest position X 
  float rest_posy;  // Rest position Y 

  // Spring simulation variables 
  //float pos = 20.0; // Position 
  float velx = 0.0;   // X Velocity 
  float vely = 0.0;   // Y Velocity 
  float accel = 0;    // Acceleration 
  float force = 0;    // Force 
  
  //Flower values
  float rotationVal;
  float r = random(0,255);
  float g = random(0,255);
  float b = random(0,255);
  
  ////Force
  //boolean override = false;
  
  //Flower
  Flower flowerCreation;
  
  //Spring[] friends;
  int me;

  // Constructor
  Spring(float x, float y, int s, float d, float m, 
  float k_in, int id) { 
    xpos = tempxpos = x; 
    ypos = tempypos = y;
    rest_posx = x;
    rest_posy = y;
    size = s;
    damp = d; 
    mass = m; 
    k = k_in;
    //friends = others;
    me = id;
    rotationVal = 0.1;  
  } 
  
  //void overrideProt() {
  //  if (override == false) {
  //  override = true;
  //  } else {
  //    override = false;
  //  }
  //}
  
  void moveTo(float targetX, float targetY) { //Method with argument
  
    rest_posy = targetY;
    rest_posx = targetX;
    
  }
  
  void update() { 
    //if (move) { 
    //  rest_posy = mouseY; 
    //  rest_posx = mouseX;
    //} 

    force = -k * (tempypos - rest_posy);  // f=-ky 
    accel = force / mass;                 // Set the acceleration, f=ma == a=f/m 
    vely = damp * (vely + accel);         // Set the velocity 
    tempypos = tempypos + vely;           // Updated position 

    force = -k * (tempxpos - rest_posx);  // f=-ky 
    accel = force / mass;                 // Set the acceleration, f=ma == a=f/m 
    velx = damp * (velx + accel);         // Set the velocity 
    tempxpos = tempxpos + velx;           // Updated position 

    flowerCreation = new Flower(tempxpos, tempypos, size, rotationVal, r, g, b);
    rotationVal += 0.001;
    
    //if ( /*overEvent() ||*/ move || override) { 
    //  over = true;
    //} else { 
    //  over = false;
    //}
  } 

  // Test to see if mouse is over this spring
  //boolean overEvent() {
  //  float disX = tempxpos - mouseX;
  //  float disY = tempypos - mouseY;
  //  if (sqrt(sq(disX) + sq(disY)) < size/2 ) {
  //    return true;
  //  } else {
  //    return false;
  //  }
  //}

  //// Make sure no other springs are active
  //boolean otherOver() {
  //  for (int i=0; i<num; i++) {
  //    if (i != me) {
  //      if (friends[i].over == true) {
  //        return true;
  //      }
  //    }
  //  }
  //  return false;
  //}

  void display() { 
    //if (over) {  
    //  fill(153);
    //} else {
    //  fill(255);
    //} 

    flowerCreation.display();
  } 

  //void pressed() { 
  //  if (over) { 
  //    move = true;
  //  } else { 
  //    move = false;
  //  }
  //} 

  //void released() { 
  //  move = false; 
  //  rest_posx = xpos;
  //  rest_posy = ypos;
  //}
} 


(((((TAB flower)))))

class Flower { //object
  //properties
  float x; 
  float y;
  float rot; //rotation
  float r;//color
  float g;//color
  float b;//color
  //float alpha; //transparancy
  float sc; //scale
  float grow; //growth rate
  int speed;
  int size;
 
  Flower(float lox, float loy, int newSize, float rotationValue, float red, float green, float blue) { //constuctor+parameters
    x = lox;
    y = loy;
    sc = 1;
    //grow = random(0.008,0.012);
    //alpha = 100;
    rot = rotationValue;
    size = newSize;
    
    r = red;
    g = green;
    b = blue;

    speed = int(random(1, 5));
  }
  
  void display () {
    pushMatrix(); 
      translate(x,y);
      scale(sc);
      rotate(degrees(rot));
      petals();
      stamen();
    popMatrix();
    //updatePos();
    //rot += 0.001;
  }
  
  //void updatePos() {
  //  x += speed;
  //  y -= speed;
    
  //  if (x > winWidth + 120) {
  //    x = -120;
  //  }
  //  if (y < -120) {
  //    y = winHeight + 120;
  //  }
  //}
  
  void stamen() {
    smooth();
    noStroke();
    fill(#fff9bb); // light yellow
    scale(sc);
    ellipse(0, 0, size - (size*0.25), size - (size*0.25));//center circle
  }
  
  void petals() { 
    pushMatrix();
      smooth();
      noStroke();
      scale(sc);
      for (int i = 0; i < 5; i++) {
        fill(r, g, b);
        ellipse(0, -(size*0.4), size, size);
        rotate(radians(72)); 
      }
      
    popMatrix();
  }
  
  //void scaleUpdate() {
  //  sc += grow;
  //  if (sc > 1.8 || sc < 0.8) {
  //    grow = -grow;
  //  }
  //}
}

(((((TAB mushroom)))))
class Mushroom {
  int x, y;
  float sc;
  
  Mushroom(int newX, int newY, float newScale) {
    x = newX;
    y = newY;
    sc = newScale;
    
  }
    
  void display () {
    pushMatrix(); 
      translate(x,y);
      scale(sc);
      base();
    popMatrix();
  }
  
  void base() {
    smooth();
    noStroke();
    fill(#fff9bb);//mushroom stalk
    ellipse(0,8,70,80);
    
    fill(255, 110, 97);//mushroom head
    ellipse(0,-30,140,90);
    ellipse(0,-50,100,100);
    
    fill(255);//mushroom spots
    ellipse(0,-70,40,40);
    ellipse(-35,-22,40,40);
    ellipse(35,-22,40,40);
  }
}